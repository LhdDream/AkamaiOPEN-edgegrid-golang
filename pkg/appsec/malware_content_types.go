package appsec

import (
	"context"
	"fmt"
	"net/http"

	validation "github.com/go-ozzo/ozzo-validation/v4"
)

type (
	// The MalwareContentTypes interface supports retrieving the malware protection content types for a configuration and version.
	//
	// https://developer.akamai.com/api/cloud_security/application_security/v1.html#malwarecontenttypes
	MalwareContentTypes interface {
		// https://developer.akamai.com/api/cloud_security/application_security/v1.html#getmalwarecontenttypes
		GetMalwareContentTypes(ctx context.Context, params GetMalwareContentTypesRequest) (*GetMalwareContentTypesResponse, error)
	}

	// GetMalwareContentTypesRequest is used to retrieve the content types for a configuration version.
	GetMalwareContentTypesRequest struct {
		ConfigID int
		Version  int
	}

	// GetMalwareContentTypesResponse is returned from a call to GetMalwareContentTypes.
	GetMalwareContentTypesResponse struct {
		ContentTypes []string `json:"malwareContentTypes"`
	}
)

// Validate validates a GetMalwareContentTypesRequest.
func (v GetMalwareContentTypesRequest) Validate() error {
	return validation.Errors{
		"ConfigID": validation.Validate(v.ConfigID, validation.Required),
		"Version":  validation.Validate(v.Version, validation.Required),
	}.Filter()
}

func (p *appsec) GetMalwareContentTypes(ctx context.Context, params GetMalwareContentTypesRequest) (*GetMalwareContentTypesResponse, error) {
	logger := p.Log(ctx)
	logger.Debug("GetMalwareContentTypes")

	if err := params.Validate(); err != nil {
		return nil, fmt.Errorf("%w: %s", ErrStructValidation, err.Error())
	}

	var result GetMalwareContentTypesResponse

	uri := fmt.Sprintf(
		"/appsec/v1/configs/%d/versions/%d/malware-policies/content-types",
		params.ConfigID,
		params.Version,
	)

	req, err := http.NewRequestWithContext(ctx, http.MethodGet, uri, nil)
	if err != nil {
		return nil, fmt.Errorf("failed to create GetMalwareContentTypes request: %w", err)
	}

	resp, err := p.Exec(req, &result)
	if err != nil {
		return nil, fmt.Errorf("GetMalwareContentTypes request failed: %w", err)
	}

	if resp.StatusCode != http.StatusOK {
		return nil, p.Error(resp)
	}

	return &result, nil

}
